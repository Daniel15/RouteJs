<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build;Test;Package" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<Major>2</Major>
		<Minor>0</Minor>
		<Build>3</Build>
		<Revision>0</Revision>
		<BuildType Condition="'$(BuildType)' == ''">dev</BuildType>
		<MSBuildCommunityTasksPath>$(MSBuildProjectDirectory)\tools\MSBuildTasks</MSBuildCommunityTasksPath>
		<PackageOutputDir>output</PackageOutputDir>
		<SolutionFile>src\RouteJs.sln</SolutionFile>
	</PropertyGroup>
	<ItemGroup>
		<PackageAssemblies Include="RouteJs.Mvc5" />
		<PackageAssemblies Include="RouteJs.Mvc4" />
		<PackageAssemblies Include="RouteJs.Mvc3" />
		<PackageAssemblies Include="RouteJs.Mvc2" />
		<PackageAssembliesAspNet5 Include="RouteJs.AspNet" />
		<AspNet5ProjectJson Include="src/RouteJs.AspNet/project.json" />
	</ItemGroup>
	<Import Project="src/tasks.proj" />

	<Target Name="UpdateVersion">
		<GitVersion LocalPath="$(MSBuildProjectDirectory)">
			<Output TaskParameter="CommitHash" PropertyName="Revision" />
		</GitVersion>
		<Time Format="yyyyMMdd-HHmm">
			<Output TaskParameter="FormattedTime" PropertyName="Date" />
		</Time>
		<!-- Prepend date to build version if a dev build-->
		<PropertyGroup Condition="$(BuildType) == 'Release'">
			<FullBuild>$(Build)</FullBuild>
		</PropertyGroup>
		<PropertyGroup Condition="$(BuildType) != 'Release'">
			<FullBuild>$(Build)-dev-$(Date)</FullBuild>
		</PropertyGroup>
		<!-- Set version for .csproj projects -->
		<AssemblyInfo
			CodeLanguage="CS"
			OutputFile="src\SharedAssemblyVersionInfo.cs"
			AssemblyVersion="$(Major).$(Minor)"
			AssemblyFileVersion="$(Major).$(Minor).$(FullBuild).$(Revision)"
			AssemblyInformationalVersion="$(Major).$(Minor).$(FullBuild)"
		/>
		<!-- 		
			Set version for ASP.NET 5 projects. In theory K_BUILD_VERSION should work but it doesn't seem 		
			to be functional yet :(. We work around this by physically writing the build number to the 		
			project.json files. For development builds we write the full version number (including 		
			build date) and reset it later so the dev build number isn't commited to the repo.		
		-->
		<UpdateAspNetProjectVersion
			Files="@(AspNet5ProjectJson)"
			Version="$(Major).$(Minor).$(FullBuild)"
		/>
	</Target>

	<Target Name="Clean" BeforeTargets="Build">
		<!--
			ASP.NET 5 projects don't delete generated files when cleaned or rebuilt, so we need to		
			do it here. See https://github.com/aspnet/XRE/issues/1301 		
		-->
		<DeleteTree Directories="src/artifacts" />
	</Target>
	
	<Target Name="RestorePackages" DependsOnTargets="Clean">
		<!-- NuGet packages for ASP.NET 5 projects -->
		<Exec
			WorkingDirectory="$(MSBuildProjectDirectory)"
			Command="dnu restore --quiet --parallel"
		/>
		<!-- npm packages -->
		<Exec
			WorkingDirectory="src/RouteJs.AspNet"
			Command="npm install"
		/>
	</Target>
	
	<Target Name="Build" DependsOnTargets="UpdateVersion; RestorePackages">
		<Exec
			WorkingDirectory="src/RouteJs.AspNet"
			Command="node node_modules\gulp\bin\gulp.js build"
		/>
		<MSBuild Projects="$(SolutionFile)" Targets="Rebuild" Properties="Configuration=Release;Platform=Any CPU;NoWarn=1607,7035" />
	</Target>
	<Target Name="ResetAspNetVersion" AfterTargets="Build">
		<!-- Resets the version number in ASP.NET project.json files so we don't commit -dev- version numbers -->
		<UpdateAspNetProjectVersion
			Files="@(AspNet5ProjectJson)"
			Version="$(Major).$(Minor).$(Build)-*"
	/>
	</Target>

	<Target Name="Test" DependsOnTargets="Build">
		<Exec
			WorkingDirectory="src/RouteJs.Tests.AspNet"
			Command="dnx test"
		/>
		<NUnit
			ToolPath="src\packages\NUnit.Runners.2.6.1\tools"
			Assemblies="
				bin\ReleaseTests\RouteJs\RouteJs.Tests.dll;
				bin\ReleaseTests\RouteJs.Mvc5\RouteJs.Tests.Mvc5.dll;
				bin\ReleaseTests\RouteJs.Mvc4\RouteJs.Tests.Mvc4.dll;
				bin\ReleaseTests\RouteJs.Mvc3\RouteJs.Tests.Mvc3.dll;
				bin\ReleaseTests\RouteJs.Mvc2\RouteJs.Tests.Mvc2.dll"
		/>
	</Target>

	<!-- Create NuGet package -->
	<Target Name="Package" DependsOnTargets="Build">
		<!-- Delete old packages -->
		<RemoveDir Directories="$(PackageOutputDir)" />
		<!-- Create new packages -->
		<MakeDir Directories="$(PackageOutputDir)" />
		<Exec
			WorkingDirectory="$(MSBuildProjectDirectory)"
			Command="src\.nuget\NuGet.exe pack src\%(PackageAssemblies.Identity)\%(PackageAssemblies.Identity).csproj -IncludeReferencedProjects -Symbols -Prop Configuration=Release -OutputDirectory output"
		/>
	</Target>

	<Target Name="CopyAspNetPackages" AfterTargets="Package">
		<!-- Copy over ASP.NET 5 packages -->
		<ItemGroup>
			<AspNet5Packages Include="src/artifacts/bin/%(PackageAssembliesAspNet5.Identity)/Release/*.nupkg" />
		</ItemGroup>
		<Copy SourceFiles="@(AspNet5Packages)" DestinationFolder="$(PackageOutputDir)" />
	</Target>

	<Target Name="Push">
		<ItemGroup>
			<PackageFiles Include="$(PackageOutputDir)\*.nupkg" Exclude="$(PackageOutputDir)\*.symbols.nupkg" />
		</ItemGroup>
		<Exec
			WorkingDirectory="$(MSBuildProjectDirectory)"
			Command="src\.nuget\NuGet.exe push %(PackageFiles.Identity) -NonInteractive"
		/>
	</Target>
</Project>
